name: Step 4-7 # End-to-End Tests

on:
  push:
    branches:
      - feature/test
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  find_exercise:
    name: Find Exercise Issue
    uses: skills/exercise-toolkit/.github/workflows/find-exercise-issue.yml@v0.4.0

  check_step_work:
    name: Check step work
    runs-on: ubuntu-latest
    needs: [find_exercise]
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Update comment - checking work
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/checking-work.md \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # START: Check practical exercise

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Check for Playwright installation
      - name: Check for Playwright installation
        id: check-playwright-installed
        continue-on-error: true
        run: |
          if [ -f "playwright.config.js" ] || [ -f "packages/frontend/playwright.config.js" ]; then
            exit 0
          fi
          if grep -q "playwright" package.json || grep -q "playwright" packages/frontend/package.json; then
            exit 0
          fi
          echo "Playwright doesn't appear to be installed"
          exit 1

      # Check for E2E test files
      - name: Check for E2E test files
        id: check-e2e-files
        continue-on-error: true
        run: |
          found=0
          
          # Check common Playwright test locations
          if [ -d "e2e" ] && [ "$(ls -A e2e 2>/dev/null)" ]; then
            found=1
          elif [ -d "tests/e2e" ] && [ "$(ls -A tests/e2e 2>/dev/null)" ]; then
            found=1
          elif [ -d "packages/frontend/e2e" ] && [ "$(ls -A packages/frontend/e2e 2>/dev/null)" ]; then
            found=1
          elif [ -d "packages/frontend/tests/e2e" ] && [ "$(ls -A packages/frontend/tests/e2e 2>/dev/null)" ]; then
            found=1
          fi
          
          if [ $found -eq 0 ]; then
            echo "No E2E test files found"
            exit 1
          fi
          exit 0

      # Check for delete tests in E2E files
      - name: Check for delete tests in E2E files
        id: check-delete-e2e-tests
        continue-on-error: true
        run: |
          # Look for delete tests in any potential E2E test file locations
          if find . -path "*/e2e/*.spec.js" -o -path "*/e2e/*.test.js" -o -path "*/tests/e2e/*.spec.js" -o -path "*/tests/e2e/*.test.js" | xargs grep -l "delete\|remove" > /dev/null; then
            exit 0
          fi
          echo "No delete functionality tests found in E2E test files"
          exit 1

      - name: Build message - step results
        id: build-message-step-results
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-results-table.md
          template-vars: |
            step_number: 4-7
            passed: ${{ !contains(steps.*.outcome, 'failure') }}
            results_table:
              - description: "Playwright should be installed for E2E testing"
                passed: ${{ steps.check-playwright-installed.outcome == 'success' }}
              - description: "E2E test files should exist"
                passed: ${{ steps.check-e2e-files.outcome == 'success' }}
              - description: "E2E tests should include tests for delete functionality"
                passed: ${{ steps.check-delete-e2e-tests.outcome == 'success' }}

      - name: Create comment - step results
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$COMMENT_BODY" \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ steps.build-message-step-results.outputs.updated-text }}

      - name: Debug step outcomes
        run: |
          echo "Overall result: ${{ contains(steps.*.outcome, 'failure') && 'FAILURE' || 'SUCCESS' }}"
          echo ""
          echo "Failed steps (if any):"
          echo '${{ toJSON(steps) }}' | jq -r 'to_entries[] | select(.value.outcome == "failure") | "‚ùå \(.key)"' || echo "No failures detected"

      - name: Fail job if not all checks passed
        if: contains(steps.*.outcome, 'failure')
        run: exit 1

      # END: Check practical exercise

      - name: Build message - step finished
        id: build-message-step-finish
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-finished-prepare-next-step.md
          template-vars: |
            next_step_number: 4-8

      - name: Update comment - step finished
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$ISSUE_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ steps.build-message-step-finish.outputs.updated-text }}

  post_next_step_content:
    name: Post next step content
    needs: [find_exercise, check_step_work]
    runs-on: ubuntu-latest
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file ".github/steps/4-8-code-coverage-improvement.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment - watching for progress
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/watching-for-progress.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable current workflow and enable next one
        run: |
          gh workflow disable "Step 4-7"
          gh workflow enable "Step 4-8"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}