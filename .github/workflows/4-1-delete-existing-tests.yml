name: Step 4-1 # Delete Existing Tests

on:
  push:
    branches:
      - feature/test
  workflow_dispatch:
  
permissions:
  contents: read
  actions: write
  issues: write

jobs:
  find_exercise:
    name: Find Exercise Issue
    uses: skills/exercise-toolkit/.github/workflows/find-exercise-issue.yml@v0.4.0

  check_step_work:
    name: Check step work
    runs-on: ubuntu-latest
    needs: [find_exercise]
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Update comment - checking work
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/checking-work.md \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # START: Check practical exercise

      - name: Check if frontend test file is empty
        id: check-frontend-tests
        continue-on-error: true
        run: |
          if [ -f "packages/frontend/src/App.test.js" ]; then
            # Check if file is empty or only contains whitespace/comments
            if [ -s "packages/frontend/src/App.test.js" ] && grep -vE '^\s*$|^\s*\/\/|^\s*\/\*|\*\/\s*$' "packages/frontend/src/App.test.js" > /dev/null; then
              echo "Frontend test file still contains code"
              exit 1
            fi
          fi
          exit 0

      - name: Check if backend test file is empty
        id: check-backend-tests
        continue-on-error: true
        run: |
          if [ -f "packages/backend/src/app.test.js" ]; then
            # Check if file is empty or only contains whitespace/comments
            if [ -s "packages/backend/src/app.test.js" ] && grep -vE '^\s*$|^\s*\/\/|^\s*\/\*|\*\/\s*$' "packages/backend/src/app.test.js" > /dev/null; then
              echo "Backend test file still contains code"
              exit 1
            fi
          fi
          exit 0

      - name: Build message - step results
        id: build-message-step-results
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-results-table.md
          template-vars: |
            step_number: 4-1
            passed: ${{ !contains(steps.*.outcome, 'failure') }}
            results_table:
              - description: "The frontend test file (packages/frontend/src/App.test.js) should be empty or contain only comments"
                passed: ${{ steps.check-frontend-tests.outcome == 'success' }}
              - description: "The backend test file (packages/backend/src/app.test.js) should be empty or contain only comments"
                passed: ${{ steps.check-backend-tests.outcome == 'success' }}

      - name: Create comment - step results
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$COMMENT_BODY" \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ steps.build-message-step-results.outputs.updated-text }}

      - name: Debug step outcomes
        run: |
          echo "Overall result: ${{ contains(steps.*.outcome, 'failure') && 'FAILURE' || 'SUCCESS' }}"
          echo ""
          echo "Failed steps (if any):"
          echo '${{ toJSON(steps) }}' | jq -r 'to_entries[] | select(.value.outcome == "failure") | "‚ùå \(.key)"' || echo "No failures detected"

      - name: Fail job if not all checks passed
        if: contains(steps.*.outcome, 'failure')
        run: exit 1

      # END: Check practical exercise

      - name: Build message - step finished
        id: build-message-step-finish
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-finished-prepare-next-step.md
          template-vars: |
            next_step_number: 4-2

      - name: Update comment - step finished
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$ISSUE_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ steps.build-message-step-finish.outputs.updated-text }}

  post_next_step_content:
    name: Post next step content
    needs: [find_exercise, check_step_work]
    runs-on: ubuntu-latest
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file ".github/steps/4-2-create-be-unit-test.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment - watching for progress
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/watching-for-progress.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable current workflow and enable next one
        run: |
          gh workflow disable "Step 4-1"
          gh workflow enable "Step 4-2"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}