name: Step 2-0 # Start Exercise

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  issues: write

env:
  STEP_1_FILE: ".github/steps/2-1-preparing.md"

jobs:
  start_exercise:
    if: |
      !github.event.repository.is_template
    name: Start Exercise
    uses: skills/exercise-toolkit/.github/workflows/start-exercise.yml@v0.4.0
    with:
      exercise-title: "GitHub Copilot Bootcamp"
      intro-message: "Welcome to the Copilot Bootcamp tutorial! ðŸš€ This guided experience will take you through setting up your development environment with GitHub Codespaces, using GitHub Copilot's Agent Mode to modify the app's title, and then implementing new features. Get ready to experience the power of AI-assisted coding in a cloud development environment! ðŸ’»âœ¨"

  post_next_step_content:
    name: Post next step content
    runs-on: ubuntu-latest
    needs: [start_exercise]
    env:
      ISSUE_URL: ${{ needs.start_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Build comment - add step content
        id: build-comment
        uses: skills/action-text-variables@v2
        with:
          template-file: ${{ env.STEP_1_FILE }}
          template-vars: |
            login: ${{ github.actor }}
            full_repo_name: ${{ github.repository }}

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$ISSUE_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ steps.build-comment.outputs.updated-text }}

      - name: Create comment - watching for progress
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file "exercise-toolkit/markdown-templates/step-feedback/watching-for-progress.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable all workflows
        run: |
          # Find all workflow files and extract their names
          for workflow_file in .github/workflows/*.yml; do
            # Extract the workflow name from the file
            workflow_name=$(grep "^name:" "$workflow_file" | head -1 | sed 's/name: *//' | sed 's/ *#.*//')

            # Skip Step 2-0 (current workflow) to avoid disabling itself
            if [[ "$workflow_name" != "Step 2-0" ]]; then
              echo "Disabling workflow: $workflow_name"
              gh workflow disable "$workflow_name" || echo "Failed to disable $workflow_name or it's already disabled"
            fi
          done

      - name: Enable next workflow
        run: |
          gh workflow enable "Step 2-1"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
