name: Step 4-8 # Code Coverage Improvement

on:
  push:
    branches:
      - feature/test
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  find_exercise:
    name: Find Exercise Issue
    uses: skills/exercise-toolkit/.github/workflows/find-exercise-issue.yml@v0.4.0

  check_step_work:
    name: Check step work
    runs-on: ubuntu-latest
    needs: [find_exercise]
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Update comment - checking work
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/checking-work.md \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # START: Check practical exercise

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Run backend tests with coverage
      - name: Run backend tests with coverage
        id: run-backend-tests-coverage
        continue-on-error: true
        run: |
          cd packages/backend
          npm test -- --coverage
          # Check if coverage is at least 80%
          coverage_percent=$(cat coverage/coverage-summary.json | grep -oE '"pct"[[:space:]]*:[[:space:]]*[0-9]*' | head -1 | grep -o '[0-9]*')
          if [ "$coverage_percent" -lt 80 ]; then
            echo "Backend test coverage is less than 80%: $coverage_percent%"
            exit 1
          fi
          echo "Backend test coverage: $coverage_percent%"
          exit 0

      # Run frontend tests with coverage
      - name: Run frontend tests with coverage
        id: run-frontend-tests-coverage
        continue-on-error: true
        run: |
          cd packages/frontend
          npm test -- --coverage
          # Check if coverage is at least 80%
          coverage_percent=$(cat coverage/coverage-summary.json | grep -oE '"pct"[[:space:]]*:[[:space:]]*[0-9]*' | head -1 | grep -o '[0-9]*')
          if [ "$coverage_percent" -lt 80 ]; then
            echo "Frontend test coverage is less than 80%: $coverage_percent%"
            exit 1
          fi
          echo "Frontend test coverage: $coverage_percent%"
          exit 0

      - name: Check for nyc or jest coverage configuration
        id: check-coverage-config
        continue-on-error: true
        run: |
          found=0
          
          # Check for Jest coverage config in package.json files
          if grep -q "collectCoverage\|coverageThreshold" package.json packages/*/package.json; then
            found=1
          fi
          
          # Check for nyc config
          if [ -f ".nycrc" ] || [ -f ".nycrc.json" ] || grep -q "nyc" package.json packages/*/package.json; then
            found=1
          fi
          
          # Check for coverage settings in Jest config files
          if [ -f "jest.config.js" ] && grep -q "coverage" jest.config.js; then
            found=1
          fi
          
          if [ -f "packages/frontend/jest.config.js" ] && grep -q "coverage" packages/frontend/jest.config.js; then
            found=1
          fi
          
          if [ -f "packages/backend/jest.config.js" ] && grep -q "coverage" packages/backend/jest.config.js; then
            found=1
          fi
          
          if [ $found -eq 0 ]; then
            echo "No coverage configuration found"
            exit 1
          fi
          exit 0

      - name: Build message - step results
        id: build-message-step-results
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-results-table.md
          template-vars: |
            step_number: 4-8
            passed: ${{ !contains(steps.*.outcome, 'failure') }}
            results_table:
              - description: "Backend tests should have at least 80% code coverage"
                passed: ${{ steps.run-backend-tests-coverage.outcome == 'success' }}
              - description: "Frontend tests should have at least 80% code coverage"
                passed: ${{ steps.run-frontend-tests-coverage.outcome == 'success' }}
              - description: "Project should have coverage configuration"
                passed: ${{ steps.check-coverage-config.outcome == 'success' }}

      - name: Create comment - step results
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$COMMENT_BODY" \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ steps.build-message-step-results.outputs.updated-text }}

      - name: Debug step outcomes
        run: |
          echo "Overall result: ${{ contains(steps.*.outcome, 'failure') && 'FAILURE' || 'SUCCESS' }}"
          echo ""
          echo "Failed steps (if any):"
          echo '${{ toJSON(steps) }}' | jq -r 'to_entries[] | select(.value.outcome == "failure") | "‚ùå \(.key)"' || echo "No failures detected"

      - name: Fail job if not all checks passed
        if: contains(steps.*.outcome, 'failure')
        run: exit 1

      # END: Check practical exercise

      - name: Build message - step finished
        id: build-message-step-finish
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-finished-prepare-next-step.md
          template-vars: |
            next_step_number: 5-1

      - name: Update comment - step finished
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$ISSUE_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ steps.build-message-step-finish.outputs.updated-text }}

  post_next_step_content:
    name: Post next step content
    needs: [find_exercise, check_step_work]
    runs-on: ubuntu-latest
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file ".github/steps/4-x-review.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file ".github/steps/5-1-checkout-code-refactoring.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment - watching for progress
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/watching-for-progress.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable current workflow and enable next one
        run: |
          gh workflow disable "Step 4-8"
          gh workflow enable "Step 5-1"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}