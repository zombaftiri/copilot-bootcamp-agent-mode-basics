name: Step 2-3 # Verify Linting Setup

on:
  push:
    branches:
      - feature/intro
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  find_exercise:
    name: Find Exercise Issue
    uses: skills/exercise-toolkit/.github/workflows/find-exercise-issue.yml@v0.4.0

  check_step_work:
    name: Check step work
    runs-on: ubuntu-latest
    needs: [find_exercise]
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Update comment - checking work
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/checking-work.md \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # START: Check practical exercise

      - name: Check for ESLint config
        id: check-eslint-config
        continue-on-error: true
        run: |
          # Check for ESLint configs in packages using find command (both legacy .eslintrc* and new eslint.config.*)
          if find packages \( -name ".eslintrc*" -o -name "eslint.config.js" -o -name "eslint.config.mjs" \) | grep -q .; then
            echo "ESLint config found in packages!"
          else
            echo "No ESLint config found in packages!" && exit 1
          fi

      - name: Check for Prettier config
        id: check-prettier-config
        continue-on-error: true
        run: |
          # Check for Prettier configs in root directory or in packages using find command
          if find . -maxdepth 1 -name ".prettierrc*" | grep -q . || find packages -name ".prettierrc*" | grep -q .; then
            echo "Prettier config found!"
          else
            echo "No Prettier config found!" && exit 1
          fi

      - name: Check for lint script in root package.json
        id: check-lint-script
        continue-on-error: true
        run: |
          grep '"lint"' package.json || (echo "No lint script in root package.json!" && exit 1)

      - name: Install dependencies
        id: install-deps
        continue-on-error: true
        run: npm ci || npm install

      - name: Run lint
        id: run-lint
        continue-on-error: true
        run: npm run lint

      - name: Build message - step results
        id: build-message-step-results
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-results-table.md
          template-vars: |
            step_number: 2-3
            passed: ${{ !contains(steps.*.outcome, 'failure') }}
            results_table:
              - description: "ESLint configuration files should exist in the packages"
                passed: ${{ steps.check-eslint-config.outcome == 'success' }}
              - description: "Prettier configuration files should exist (either at root or in packages)"
                passed: ${{ steps.check-prettier-config.outcome == 'success' }}
              - description: "A lint script should be defined in the root package.json"
                passed: ${{ steps.check-lint-script.outcome == 'success' }}
              - description: "The lint script should run without errors"
                passed: ${{ steps.run-lint.outcome == 'success' }}

      - name: Create comment - step results
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$COMMENT_BODY" \
            --edit-last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ steps.build-message-step-results.outputs.updated-text }}

      - name: Fail job if not all checks passed
        if: contains(steps.*.outcome, 'failure')
        run: exit 1

      # END: Check practical exercise

      - name: Build message - step finished
        id: build-message-step-finish
        uses: skills/action-text-variables@v2
        with:
          template-file: exercise-toolkit/markdown-templates/step-feedback/step-finished-prepare-next-step.md
          template-vars: |
            next_step_number: 3-1

      - name: Update comment - step finished
        run: |
          gh issue comment "$ISSUE_URL" \
            --body "$ISSUE_BODY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_BODY: ${{ steps.build-message-step-finish.outputs.updated-text }}

  post_next_step_content:
    name: Post next step content
    needs: [find_exercise, check_step_work]
    runs-on: ubuntu-latest
    env:
      ISSUE_URL: ${{ needs.find_exercise.outputs.issue-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get response templates
        uses: actions/checkout@v4
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.4.0

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file ".github/steps/2-x-review.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment - add step content
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file ".github/steps/3-1-add-vanilla-table.md"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment - watching for progress
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file exercise-toolkit/markdown-templates/step-feedback/watching-for-progress.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Disable current workflow and enable next one
        run: |
          gh workflow disable "Step 2-3"
          gh workflow enable "Step 3-1"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
